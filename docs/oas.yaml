openapi: 3.1.0
info:
  title: Fast Blog
  description: A RESTful blog created with FastAPI
  version: 1.0.0
  contact:
    name: Mahdi Haghverdi
    email: mahdihaghverdiliewpl@gmail.com
    url: https://github.com/mahdihaghverdi/
  license:
    name: GPLv3
    url: https://www.gnu.org/licenses/gpl-3.0.html

servers:
  - url: https://fastblog.io
    description: Main servers
  - url: http://localhost:8000/
    description: Local development server

paths:
  "/users/signup":
    post:
      tags:
      - users
      summary: Signup User
      operationId: signup_user_users_signup_post
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              "$ref": "#/components/schemas/Body_signup_user_users_signup_post"
        required: true
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserOutSchema"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/users/me":
    get:
      tags:
      - users
      summary: Read Users Me
      operationId: read_users_me_users_me_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserOutSchema"
      security:
      - OAuth2PasswordBearer: []
  "/auth/access-token":
    post:
      tags:
      - auth
      summary: Login For Access Token
      operationId: login_for_access_token_auth_access_token_post
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              "$ref": "#/components/schemas/Body_login_for_access_token_auth_access_token_post"
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TokenSchema"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/posts/":
    post:
      tags:
      - posts
      summary: Create Post
      description: Create a post
      operationId: create_post_posts__post
      security:
      - OAuth2PasswordBearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreatePostSchema"
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PostSchema"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    get:
      tags:
      - posts
      summary: Get Posts
      description: Retrieve all the posts
      operationId: get_posts_posts__get
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          minimum: 1
          description: page number of the pagination
          default: 1
          title: Page
        description: page number of the pagination
      - name: per-page
        in: query
        required: false
        schema:
          type: integer
          maximum: 30
          minimum: 1
          description: number of posts per page
          default: 5
          title: Per-Page
        description: number of posts per page
      - name: sort
        in: query
        required: false
        schema:
          allOf:
          - "$ref": "#/components/schemas/Sort"
          description: sorts the returned posts
          default: date
          title: Sort
        description: sorts the returned posts
      - name: desc
        in: query
        required: false
        schema:
          type: boolean
          description: order of the sorted posts
          default: true
          title: Desc
        description: order of the sorted posts
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PostSchema"
                title: Response Get Posts Posts  Get
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/posts/{post_id}":
    get:
      tags:
      - posts
      summary: Get Post
      description: Return details of a specific post
      operationId: get_post_posts__post_id__get
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: post_id
        in: path
        required: true
        schema:
          type: integer
          title: Post Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PostSchema"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    patch:
      tags:
      - posts
      summary: Update Post
      description: Updating a post
      operationId: update_post_posts__post_id__patch
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: post_id
        in: path
        required: true
        schema:
          type: integer
          title: Post Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdatePostSchema"
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PostSchema"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    delete:
      tags:
      - posts
      summary: Delete Post
      description: Delete a specific post
      operationId: delete_post_posts__post_id__delete
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: post_id
        in: path
        required: true
        schema:
          type: integer
          title: Post Id
      responses:
        '204':
          description: Successful Response
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/posts/{post_id}/comment":
    post:
      tags:
      - posts
      summary: Add Comment
      operationId: add_comment_posts__post_id__comment_post
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: post_id
        in: path
        required: true
        schema:
          type: integer
          title: Post Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              minLength: 1
              maxLength: 255
              title: Comment
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CommentSchema"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/posts/{post_id}/comment/{comment_id}":
    post:
      tags:
      - posts
      summary: Add Reply
      operationId: add_reply_posts__post_id__comment__comment_id__post
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: post_id
        in: path
        required: true
        schema:
          type: integer
          title: Post Id
      - name: comment_id
        in: path
        required: true
        schema:
          type: integer
          title: Comment Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              minLength: 1
              maxLength: 255
              title: Reply
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CommentSchema"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/drafts/":
    post:
      tags:
      - drafts
      summary: Create Draft
      description: Create a draft draft
      operationId: create_draft_drafts__post
      security:
      - OAuth2PasswordBearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateDraftSchema"
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DraftSchema"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    get:
      tags:
      - drafts
      summary: Get Drafts
      description: Retrieve all the draft
      operationId: get_drafts_drafts__get
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          minimum: 1
          description: page number of the pagination
          default: 1
          title: Page
        description: page number of the pagination
      - name: per-page
        in: query
        required: false
        schema:
          type: integer
          maximum: 30
          minimum: 1
          description: number of posts per page
          default: 5
          title: Per-Page
        description: number of posts per page
      - name: sort
        in: query
        required: false
        schema:
          allOf:
          - "$ref": "#/components/schemas/Sort"
          description: sorts the returned posts
          default: date
          title: Sort
        description: sorts the returned posts
      - name: desc
        in: query
        required: false
        schema:
          type: boolean
          description: order of the sorted posts
          default: true
          title: Desc
        description: order of the sorted posts
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/DraftSchema"
                title: Response Get Drafts Drafts  Get
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/drafts/{draft_id}":
    get:
      tags:
      - drafts
      summary: Get Draft
      description: Return details of a specific draft
      operationId: get_draft_drafts__draft_id__get
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: draft_id
        in: path
        required: true
        schema:
          type: integer
          title: Draft Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DraftSchema"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    put:
      tags:
      - drafts
      summary: Update Draft
      description: Replace an existing draft
      operationId: update_draft_drafts__draft_id__put
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: draft_id
        in: path
        required: true
        schema:
          type: integer
          title: Draft Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateDraftSchema"
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DraftSchema"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    delete:
      tags:
      - drafts
      summary: Delete Draft
      description: Delete a specific draft
      operationId: delete_draft_drafts__draft_id__delete
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: draft_id
        in: path
        required: true
        schema:
          type: integer
          title: Draft Id
      responses:
        '204':
          description: Successful Response
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/drafts/{draft_id}/publish":
    post:
      tags:
      - drafts
      summary: Publish Draft
      description: Publish a draft post
      operationId: publish_draft_drafts__draft_id__publish_post
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: draft_id
        in: path
        required: true
        schema:
          type: integer
          title: Draft Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PublishSchema"
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PostSchema"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/@{username}/{post_slug}":
    get:
      tags:
      - global posts
      summary: Get Global Post
      operationId: get_global_post___username___post_slug__get
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
          title: Username
      - name: post_slug
        in: path
        required: true
        schema:
          type: string
          title: Post Slug
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GlobalPostSchema"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/comments/{post_id}/basecomments":
    get:
      tags:
      - comments
      summary: Get Base Comments
      operationId: get_base_comments_comments__post_id__basecomments_get
      parameters:
      - name: post_id
        in: path
        required: true
        schema:
          type: integer
          title: Post Id
      - name: reply-level
        in: query
        required: false
        schema:
          allOf:
          - "$ref": "#/components/schemas/ReplyLevel"
          description: how many nested replies should be returned
          default: '0'
          title: Reply-Level
        description: how many nested replies should be returned
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/CommentSchema"
                title: Response Get Base Comments Comments  Post Id  Basecomments
                  Get
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/comments/{post_id}/{comment_id}":
    get:
      tags:
      - comments
      summary: Get Comments
      operationId: get_comments_comments__post_id___comment_id__get
      parameters:
      - name: post_id
        in: path
        required: true
        schema:
          type: integer
          title: Post Id
      - name: comment_id
        in: path
        required: true
        schema:
          type: integer
          title: Comment Id
      - name: reply-level
        in: query
        required: false
        schema:
          allOf:
          - "$ref": "#/components/schemas/ReplyLevel"
          description: how many nested replies should be returned
          default: '0'
          title: Reply-Level
        description: how many nested replies should be returned
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/CommentSchema"
                title: Response Get Comments Comments  Post Id   Comment Id  Get
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
components:
  schemas:
    Body_login_for_access_token_auth_access_token_post:
      properties:
        grant_type:
          type: string
          pattern: password
          title: Grant Type
        username:
          type: string
          title: Username
        password:
          type: string
          title: Password
        scope:
          type: string
          title: Scope
          default: ''
        client_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Client Id
        client_secret:
          anyOf:
          - type: string
          - type: 'null'
          title: Client Secret
      type: object
      required:
      - grant_type
      - username
      - password
      title: Body_login_for_access_token_auth_access_token_post
    Body_signup_user_users_signup_post:
      properties:
        username:
          type: string
          title: Username
        password:
          type: string
          title: Password
      type: object
      required:
      - username
      - password
      title: Body_signup_user_users_signup_post
    CommentSchema:
      properties:
        id:
          type: integer
          title: Id
        created:
          type: string
          format: date-time
          title: Created
        comment:
          type: string
          title: Comment
        parent_id:
          anyOf:
          - type: integer
          - type: 'null'
          title: Parent Id
        path:
          anyOf:
          - type: string
          - type: 'null'
          title: Path
        username:
          type: string
          title: Username
        reply_count:
          type: integer
          title: Reply Count
      type: object
      required:
      - id
      - created
      - comment
      - parent_id
      - path
      - username
      - reply_count
      title: CommentSchema
    CreateDraftSchema:
      properties:
        title:
          type: string
          minLength: 1
          title: Title
        body:
          type: string
          minLength: 1
          title: Body
      type: object
      required:
      - title
      - body
      title: CreateDraftSchema
    CreatePostSchema:
      properties:
        title:
          type: string
          minLength: 1
          title: Title
        body:
          type: string
          minLength: 1
          title: Body
        tags:
          items:
            type: string
            minLength: 1
          type: array
          maxItems: 5
          minItems: 1
          uniqueItems: true
          title: Tags
        title_in_url:
          anyOf:
          - type: string
            minLength: 1
          - type: 'null'
          title: Title In Url
      type: object
      required:
      - title
      - body
      - tags
      title: CreatePostSchema
    DraftSchema:
      properties:
        id:
          type: integer
          title: Id
        created:
          type: string
          format: date-time
          title: Created
        title:
          type: string
          minLength: 1
          title: Title
        body:
          type: string
          minLength: 1
          title: Body
      type: object
      required:
      - id
      - created
      - title
      - body
      title: DraftSchema
    GlobalPostSchema:
      properties:
        id:
          type: integer
          title: Id
        created:
          type: string
          format: date-time
          title: Created
        title:
          type: string
          minLength: 1
          title: Title
        body:
          type: string
          minLength: 1
          title: Body
        username:
          type: string
          title: Username
        url:
          type: string
          minLength: 1
          format: uri
          title: Url
        tags:
          items:
            type: string
          type: array
          title: Tags
        all_comments_count:
          type: integer
          title: All Comments Count
        base_comments_count:
          type: integer
          title: Base Comments Count
        reply_comments_count:
          type: integer
          title: Reply Comments Count
      type: object
      required:
      - id
      - created
      - title
      - body
      - username
      - url
      - tags
      - all_comments_count
      - base_comments_count
      - reply_comments_count
      title: GlobalPostSchema
    HTTPValidationError:
      properties:
        detail:
          items:
            "$ref": "#/components/schemas/ValidationError"
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    PostSchema:
      properties:
        id:
          type: integer
          title: Id
        created:
          type: string
          format: date-time
          title: Created
        title:
          type: string
          minLength: 1
          title: Title
        body:
          type: string
          minLength: 1
          title: Body
        username:
          type: string
          title: Username
        url:
          type: string
          minLength: 1
          format: uri
          title: Url
        tags:
          items:
            type: string
          type: array
          title: Tags
      type: object
      required:
      - id
      - created
      - title
      - body
      - username
      - url
      - tags
      title: PostSchema
    PublishSchema:
      properties:
        title_in_url:
          anyOf:
          - type: string
            minLength: 1
          - type: 'null'
          title: Title In Url
        tags:
          items:
            type: string
            minLength: 1
          type: array
          maxItems: 5
          minItems: 1
          uniqueItems: true
          title: Tags
      type: object
      required:
      - tags
      title: PublishSchema
    ReplyLevel:
      type: string
      enum:
      - '0'
      - '1'
      - '2'
      - '3'
      title: ReplyLevel
    Sort:
      type: string
      enum:
      - title
      - date
      title: Sort
    TokenSchema:
      properties:
        access_token:
          type: string
          title: Access Token
        token_type:
          type: string
          title: Token Type
      type: object
      required:
      - access_token
      - token_type
      title: TokenSchema
    UpdatePostSchema:
      properties:
        title:
          anyOf:
          - type: string
            minLength: 1
          - type: 'null'
          title: Title
        body:
          anyOf:
          - type: string
            minLength: 1
          - type: 'null'
          title: Body
        tags:
          anyOf:
          - items:
              type: string
              minLength: 1
            type: array
            maxItems: 5
            minItems: 1
            uniqueItems: true
          - type: 'null'
          title: Tags
        title_in_url:
          anyOf:
          - type: string
            minLength: 1
          - type: 'null'
          title: Title In Url
      type: object
      title: UpdatePostSchema
    UserOutSchema:
      properties:
        username:
          type: string
          title: Username
        created:
          type: string
          format: date-time
          title: Created
      type: object
      required:
      - username
      - created
      title: UserOutSchema
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
      - loc
      - msg
      - type
      title: ValidationError
  securitySchemes:
    OAuth2PasswordBearer:
      type: oauth2
      flows:
        password:
          scopes: {}
          tokenUrl: "/auth/access-token"
