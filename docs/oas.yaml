openapi: 3.1.0
info:
  title: Fast Blog
  description: A RESTful blog created with FastAPI
  version: 1.0.0
  contact:
    name: Mahdi Haghverdi
    email: mahdihaghverdiliewpl@gmail.com
    url: https://github.com/mahdihaghverdi/
  license:
    name: GPLv3
    url: https://www.gnu.org/licenses/gpl-3.0.html

servers:
  - url: https://fastblog.io
    description: Main servers
  - url: http://localhost:8000/
    description: Local development server

paths:
  "/posts/":
    post:
      tags:
      - posts
      summary: Create Post
      description: Create a post
      operationId: create_post_posts__post
      security:
      - OAuth2PasswordBearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreatePostSchema"
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PostSchema"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    get:
      tags:
      - posts
      summary: Get Posts
      description: Retrieve all the posts
      operationId: get_posts_posts__get
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          minimum: 1
          description: page number of the pagination
          default: 1
          title: Page
        description: page number of the pagination
      - name: per-page
        in: query
        required: false
        schema:
          type: integer
          maximum: 30
          minimum: 1
          description: number of posts per page
          default: 5
          title: Per-Page
        description: number of posts per page
      - name: sort
        in: query
        required: false
        schema:
          allOf:
          - "$ref": "#/components/schemas/Sort"
          description: sorts the returned posts
          default: date
          title: Sort
        description: sorts the returned posts
      - name: desc
        in: query
        required: false
        schema:
          type: boolean
          description: order of the sorted posts
          default: true
          title: Desc
        description: order of the sorted posts
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PostSchema"
                title: Response Get Posts Posts  Get
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/posts/{post_id}":
    get:
      tags:
      - posts
      summary: Get Post
      description: Return details of a specific post
      operationId: get_post_posts__post_id__get
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: post_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          title: Post Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PostSchema"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    put:
      tags:
      - posts
      summary: Update Post
      description: Replace an existing post
      operationId: update_post_posts__post_id__put
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: post_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          title: Post Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreatePostSchema"
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PostSchema"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    delete:
      tags:
      - posts
      summary: Delete Post
      description: Delete a specific post
      operationId: delete_post_posts__post_id__delete
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: post_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          title: Post Id
      responses:
        '204':
          description: Successful Response
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/users/signup":
    post:
      tags:
      - users
      summary: Signup User
      operationId: signup_user_users_signup_post
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              "$ref": "#/components/schemas/Body_signup_user_users_signup_post"
        required: true
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserSchema"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/users/me":
    get:
      tags:
      - users
      summary: Read Users Me
      operationId: read_users_me_users_me_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserSchema"
      security:
      - OAuth2PasswordBearer: []
  "/auth/access-token":
    post:
      tags:
      - auth
      summary: Login For Access Token
      operationId: login_for_access_token_auth_access_token_post
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              "$ref": "#/components/schemas/Body_login_for_access_token_auth_access_token_post"
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TokenSchema"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
components:
  schemas:
    Body_login_for_access_token_auth_access_token_post:
      properties:
        grant_type:
          type: string
          pattern: password
          title: Grant Type
        username:
          type: string
          title: Username
        password:
          type: string
          title: Password
        scope:
          type: string
          title: Scope
          default: ''
        client_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Client Id
        client_secret:
          anyOf:
          - type: string
          - type: 'null'
          title: Client Secret
      type: object
      required:
      - grant_type
      - username
      - password
      title: Body_login_for_access_token_auth_access_token_post
    Body_signup_user_users_signup_post:
      properties:
        username:
          type: string
          title: Username
        password:
          type: string
          title: Password
      type: object
      required:
      - username
      - password
      title: Body_signup_user_users_signup_post
    CreatePostSchema:
      properties:
        title:
          type: string
          minLength: 1
          title: Title
        body:
          type: string
          minLength: 1
          title: Body
      type: object
      required:
      - title
      - body
      title: CreatePostSchema
    HTTPValidationError:
      properties:
        detail:
          items:
            "$ref": "#/components/schemas/ValidationError"
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    PostSchema:
      properties:
        id:
          type: string
          format: uuid
          title: Id
        created:
          type: string
          format: date-time
          title: Created
        title:
          type: string
          minLength: 1
          title: Title
        body:
          type: string
          minLength: 1
          title: Body
      type: object
      required:
      - id
      - created
      - title
      - body
      title: PostSchema
    Sort:
      type: string
      enum:
      - title
      - date
      title: Sort
    TokenSchema:
      properties:
        access_token:
          type: string
          title: Access Token
        token_type:
          type: string
          title: Token Type
      type: object
      required:
      - access_token
      - token_type
      title: TokenSchema
    UserSchema:
      properties:
        username:
          type: string
          title: Username
        posts:
          items:
            "$ref": "#/components/schemas/PostSchema"
          type: array
          title: Posts
      type: object
      required:
      - username
      - posts
      title: UserSchema
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
      - loc
      - msg
      - type
      title: ValidationError
  securitySchemes:
    OAuth2PasswordBearer:
      type: oauth2
      flows:
        password:
          scopes: {}
          tokenUrl: "/auth/access-token"
