openapi: 3.0.3

info:
  title: Fast Blog
  description: A RESTful blog created with FastAPI
  version: 0.1.0
  contact:
    name: Mahdi Haghverdi
    email: mahdihaghverdiliewpl@gmail.com
    url: https://github.com/mahdihaghverdi/
  license:
    name: GPLv3
    url: https://www.gnu.org/licenses/gpl-3.0.html

servers:
  - url: https://fastblog.io
    description: Main servers
  - url: http://localhost:8000/
    description: Local development server

paths:
  /posts:
    get:
      summary: Retrieves all the posts.
      parameters:
        - name: page
          in: query
          description: page number of the pagination
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: perPage
          in: query
          description: number of posts per page
          required: false
          schema:
            type: integer
            default: 5
            minimum: 1
            maximum: 30
        - name: sort
          in: query
          description: sorts the returned posts
          required: false
          schema:
            type: string
            enum: [name, date]
            default: date
        - name: order
          in: query
          description: page number of the pagination
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: 1
      responses:
        '200':
          description: OK. A JSON array of the posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostsSchema'
        '401':
          description: Unauthenticated request, the client is not logged in.
          $ref: '#/components/responses/Unauthenticated'
        '404':
          description: Not found resource OR an unauthorised request is made by client.
          $ref: '#/components/responses/NotFound'
        '5XX':
          description: Unexpected error.
          $ref: '#/components/responses/ServerError'

    post:
      summary: Create a post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostSchema'
      responses:
        '201':
          description: A JSON repr of the created post.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSchema'

  /posts{post_id}:
    parameters:
      - in: path
        name: post_id
        required: true
        schema:
          type: string
          format: uuid
          example: d222e7a3-6afb-463a-9709-38eb70cc670d
    get:
      summary: Returns the details of a specific post
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/PostSchema'
        '404':
          description: The post is not found
          $ref: '#/components/responses/NotFound'

components:
  responses:
    Unauthenticated:
      description: The client is not logged in.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The resource is not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: Some unknown error in the server
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
          example: '404'
        detail:
          type: string
          example: 'Resource is not Found'
      required:
        - code
        - message

    BasePostSchema:
      type: object
      required:
        - title
        - body
      properties:
        title:
          type: string
          example: 'The most used Python built-in type'
          minLength: 1
        body:
          type: string
          example: 'Well Python has many types but...'
          minLength: 1

    CreatePostSchema:
      allOf:
        - $ref: '#/components/schemas/BasePostSchema'

    PostSchema:
      allOf:
        - $ref: '#/components/schemas/BasePostSchema'
      type: object
      properties:
        id:
          type: string
          format: uuid
        created:
          type: string
          format: date-time
      required:
        - id
        - created

    PostsSchema:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/PostSchema'
